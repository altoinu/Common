/** * This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file, * You can obtain one at http://mozilla.org/MPL/2.0/. *  * Copyright (c) 2014 Kaoru Kawashima @altoinu http://altoinu.com */package com.altoinu.flash.customcomponents.drawingboard.imageEditTools.proto{		import com.altoinu.flash.customcomponents.drawingboard.DrawingLayer;
	import com.altoinu.flash.customcomponents.drawingboard.IDrawingLayer;
	import com.altoinu.flash.customcomponents.drawingboard.events.DrawingBoardEvent;
	import com.altoinu.flash.customcomponents.drawingboard.events.ImageSelectionToolEvent;
	
	import flash.display.DisplayObject;
	import flash.display.InteractiveObject;
	import flash.events.Event;
	import flash.geom.Point;
	import flash.geom.Rectangle;
		//--------------------------------------	//  Events	//--------------------------------------		/**	 *  Dispatched when an image is selected.	 *	 *  @eventType com.altoinu.flash.customcomponents.drawingboard.events.ImageSelectionToolEvent.SELECT	 */	[Event(name="select", type="com.altoinu.flash.customcomponents.drawingboard.events.ImageSelectionToolEvent")]		/**	 *  Dispatched when an image is deselected.	 *	 *  @eventType com.altoinu.flash.customcomponents.drawingboard.events.ImageSelectionToolEvent.DESELECT	 */	[Event(name="deselect", type="com.altoinu.flash.customcomponents.drawingboard.events.ImageSelectionToolEvent")]		/**	 *  Dispatched when selected image is moved by this Image_SelectionTool.	 *	 *  @eventType com.altoinu.flash.customcomponents.drawingboard.events.ImageSelectionToolEvent.TARGET_MOVE	 */	[Event(name="targetMove", type="com.altoinu.flash.customcomponents.drawingboard.events.ImageSelectionToolEvent")]		/**	 * Image_SelectionTool handles selecting an <code>target</code> image on the drawing board.	 * This is the base class for all image modifying tools that edits image piece already drawn	 * on <code>DrawingLayer</code> by <code>Image_UpdateTool</code>.	 * 	 * <p>Optionally, you can either use method <code>addChild</code> to add a DisplayObject or	 * extend this class so it can be used as a visual reference on the stage.</p>	 *	 * @author Kaoru Kawashima	 */	public class Image_SelectionTool extends Image_InteractTool	{				//--------------------------------------------------------------------------		//		//  Contructor		//		//--------------------------------------------------------------------------				/**		 * Constructor.		 * 		 * @param selectionHighlight Image used as selection highlight.		 * 		 */		public function Image_SelectionTool(selectionHighlight:DisplayObject = null)		{						super();						this.selectionHighlight = selectionHighlight;					}				//--------------------------------------------------------------------------		//		//  Properties		//		//--------------------------------------------------------------------------				/**		 * If true, then <code>Image_SelectionTool</code> causes events <code>DrawingBoardEvent.IMAGE_UPDATED</code>		 * <code>DrawingBoardEvent.IMAGE_SELECTION_UPDATED</code> to dispatch from the <code>DrawingLayer</code>		 * it is on when <code>target</code> changes.		 */		public var triggerDrawingLayerEvent:Boolean = true;				/**		 * Enables/Disables repositioning of the selected target by method <code>moveTarget</code>.		 */		public var moveTargetEnabled:Boolean = true;				//----------------------------------		//  selectionHighlight		//----------------------------------				private var selectionHighlightMouseEnabled:Boolean;		private var _selectionHighlight:DisplayObject;				/**		 * Image used as selection highlight.		 */		public function get selectionHighlight():DisplayObject		{						return _selectionHighlight;					}				/**		 * @private		 */		public function set selectionHighlight(newHighlight:DisplayObject):void		{						// Remove previous highlight			if ((_selectionHighlight != null) && (_selectionHighlight.parent != null))			{								_selectionHighlight.parent.removeChild(_selectionHighlight);								if (_selectionHighlight is InteractiveObject)					InteractiveObject(_selectionHighlight).mouseEnabled = selectionHighlightMouseEnabled;							}						_selectionHighlight = newHighlight;						// add new highlight			if (_selectionHighlight != null)			{								addChildAt(_selectionHighlight, 0);								if (_selectionHighlight is InteractiveObject)				{										selectionHighlightMouseEnabled = InteractiveObject(_selectionHighlight).mouseEnabled;					InteractiveObject(_selectionHighlight).mouseEnabled = false;									}							}					}				//----------------------------------		//  target		//----------------------------------				private var _target:DisplayObject;				[Bindable(event="targetChanged")]		/**		 * DisplayObject currently selected by this Image_SelectionTool.  If this is null, then selection tool is not attached to anything at the moment.		 */		public function get target():DisplayObject		{						return _target;					}				/**		 * @private		 */		public function set target(selectionTarget:DisplayObject):void		{						if (_target != selectionTarget)			{								var previousTarget:DisplayObject = _target;								if ((selectionTarget != null) && (selectionTarget is DisplayObject))				{										_target = selectionTarget;					positionHighlight();									}				else				{										// If selectionTarget is null, then remove target					var drawingLayerTargetWasOn:DrawingLayer;					if ((previousTarget != null) && (previousTarget.parent is DrawingLayer))						drawingLayerTargetWasOn = DrawingLayer(previousTarget.parent);										hideSelectionHighlight();					_target = null;										dispatchDrawingBoardEvents(drawingLayerTargetWasOn);									}								dispatchEvent(new Event("targetChanged"));								if (_target)					dispatchEvent(new ImageSelectionToolEvent(ImageSelectionToolEvent.SELECT, false, false, _target, previousTarget));				else					dispatchEvent(new ImageSelectionToolEvent(ImageSelectionToolEvent.DESELECT, false, false, _target, previousTarget));								}					}				//--------------------------------------------------------------------------		//		//  Protected methods		//		//--------------------------------------------------------------------------				/**		 * Modifies itself (the selection highlight) coordinates and size, but not the target object that is selected.		 * This is useful if you want to change selection highlight to show what the new selection will look like.		 *		 * @param newX New x coordinate.		 * @param newY New y coordinate.		 * @param newWidth New width.		 * @param newHeight New height.		 *		 */		protected function setHighlightSize(newX:Number = NaN, newY:Number = NaN, newWidth:Number = NaN, newHeight:Number = NaN):void		{						var originalRotation:Number = rotation;			rotation = 0;						if (isFinite(newWidth))				width = newWidth;			if (isFinite(newHeight))				height = newHeight;			if (isFinite(newX))				x = newX;			if (isFinite(newY))				y = newY;						rotation = originalRotation;					}				/**		 * Modifies itself (the selection highlight) coordinates and rotation but not the target object that is selected.		 * This is useful if you want to change selection highlight to show what the new selection will look like.		 * @param angle		 * 		 */		protected function setHighlightRotation(angle:Number):void		{						var rotateAt:Point = new Point(_target.x, _target.y);			var dx:Number = rotateAt.x - x;			var dy:Number = rotateAt.y - y;			var dist:Number = Math.sqrt(dx * dx + dy * dy);			var a:Number = Math.atan2(dy, dx) * 180 / Math.PI;			var offset:Number = 180 - a;						var currentPoint:Point = new Point(x, y);			var ra:Number = (angle - offset) * Math.PI / 180;			x = rotateAt.x + Math.cos(ra) * dist;			y = rotateAt.y + Math.sin(ra) * dist;						rotation = angle;					}				protected function dispatchDrawingBoardEvents(targetDrawingLayer:IDrawingLayer = null):void		{						if (triggerDrawingLayerEvent)			{								if ((targetDrawingLayer == null) && (_target != null) && (_target.parent is IDrawingLayer))					targetDrawingLayer = _target.parent as IDrawingLayer;								if (targetDrawingLayer != null)				{										targetDrawingLayer.dispatchEvent(new DrawingBoardEvent(DrawingBoardEvent.IMAGE_UPDATED, false, false, _target, null, targetDrawingLayer));					targetDrawingLayer.dispatchEvent(new DrawingBoardEvent(DrawingBoardEvent.IMAGE_SELECTION_UPDATED, false, false, _target, null, targetDrawingLayer));										if (targetDrawingLayer.parentDrawingBoard != null)					{												targetDrawingLayer.parentDrawingBoard.dispatchEvent(new DrawingBoardEvent(DrawingBoardEvent.IMAGE_UPDATED, false, false, _target, null, targetDrawingLayer));						targetDrawingLayer.parentDrawingBoard.dispatchEvent(new DrawingBoardEvent(DrawingBoardEvent.IMAGE_SELECTION_UPDATED, false, false, _target, null, targetDrawingLayer));											}									}							}					}				//--------------------------------------------------------------------------		//		//  Public methods		//		//--------------------------------------------------------------------------				/**		 * Hides selection highlight by removing it from the view.		 */		public function hideSelectionHighlight():void		{						if ((parent != null))				parent.removeChild(this);					}				/**		 * Moves selected target to specified position.		 * @param xLoc		 * @param yLoc		 * 		 */		public function moveTarget(xLoc:Number, yLoc:Number):void		{						if (moveTargetEnabled &&				(_target != null) &&				(_target.parent != null) &&				(_target.parent is IDrawingLayer))			{								_target.x = xLoc;				_target.y = yLoc;								positionHighlight();								dispatchEvent(new ImageSelectionToolEvent(ImageSelectionToolEvent.TARGET_MOVE, false, false, _target));							}					}				/**		 * Positions selection tool above <code>target</code> as a highlight.		 * 		 */		public function positionHighlight():void		{						if ((_target != null) &&				(_target.parent != null))			{								// Remove highlight from wherever it was attached to previously				hideSelectionHighlight();								// Attach selection highlight above _target				_target.parent.addChildAt(this, _target.parent.getChildIndex(_target) + 1);								// And size it exactly the same as this.target				var targetBound:Rectangle = _target.getBounds(_target);				setHighlightSize(_target.x + (targetBound.x * _target.scaleX), _target.y + (targetBound.y * _target.scaleY),								 targetBound.width * _target.scaleX, targetBound.height * _target.scaleY);								// and set rotation				setHighlightRotation(_target.rotation);								// then dispatch events				dispatchDrawingBoardEvents();							}					}			}	}