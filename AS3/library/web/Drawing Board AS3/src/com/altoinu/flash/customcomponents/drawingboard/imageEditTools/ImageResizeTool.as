/** * This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file, * You can obtain one at http://mozilla.org/MPL/2.0/. *  * Copyright (c) 2014 Kaoru Kawashima @altoinu http://altoinu.com */package com.altoinu.flash.customcomponents.drawingboard.imageEditTools{		import com.altoinu.flash.customcomponents.drawingboard.imageEditTools.proto.Image_SelectionTool;		import flash.display.DisplayObject;	import flash.events.MouseEvent;		/**	 * ImageResizeTool handles resizing selected <code>target</code> on the drawing board.	 * 	 * <p>Optionally, you can either <code>addChild</code> a DisplayObject or extend this class so it can be used as a	 * visual reference on the stage.</p>	 *	 * @author Kaoru Kawashima	 */	public class ImageResizeTool extends Image_SelectionTool	{				//--------------------------------------------------------------------------		//		//  Constructor		//		//--------------------------------------------------------------------------				/**		 * Constructor.		 * 		 * @param selectionHighlight		 * 		 */		public function ImageResizeTool(selectionHighlight:DisplayObject = null)		{						super(selectionHighlight);						// Add mouse drag handler			this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseDrag);					}				//--------------------------------------------------------------------------		//		//  Properties		//		//--------------------------------------------------------------------------				/**		 * If true, then selected image can be resized by mouse cursor by dragging the edge.		 */		public var mouseResize:Boolean = false;				//--------------------------------------------------------------------------		//		//  Public methods		//		//--------------------------------------------------------------------------				/**		 * Resizes and positions the selected <code>target</code> image item to specified size.  If any of the parameter is not given (set to NaN), then		 * the <code>target</code> image item is resized and repositioned to match the coordinate and size of Image_ResizeTool itself.		 *		 * @param newX New x.		 * @param newY New y.		 * @param newWidth New width.		 * @param newHeight New height.		 *		 */		public function resizeTarget(newX:Number = NaN, newY:Number = NaN, newWidth:Number = NaN, newHeight:Number = NaN):void		{						if (this.target != null)			{								var setWidth:Number;				var setHeight:Number;				var setX:Number;				var setY:Number;								// Resize selected item to specified size				if (isFinite(newWidth))					setWidth = newWidth;				else					setWidth = this.width;								if (isFinite(newHeight))					setHeight = newHeight;				else					setHeight = this.height;								if (isFinite(newX))					setX = newX;  // Set to new value				else					setX = this.x + (setWidth / 2);  // or set to the same value as the selection highlight if the value is not specified									if (isFinite(newY))					setY = newY;				else					setY = this.y + (setHeight / 2);								if ((isFinite(newX) || isFinite(newY) || isFinite(newWidth) || isFinite(newHeight)) &&					(this.target != null) && (this.target.parent != null))				{										var rotated:Boolean = false;					if ((this.target.rotation % 90 == 0) && (this.target.rotation % 180 != 0))					{												// For some reason resizing screws up in Flash when a DisplayObject is at 90 or 270 degree rotation so shift a little to avoid this						rotated = true;						this.target.rotation -= 1;											}										this.target.width = setWidth;					this.target.height = setHeight;					this.target.x = setX;					this.target.y = setY;										if (rotated)						this.target.rotation += 1;															// Set highlight					positionHighlight()									}							}					}				//--------------------------------------------------------------------------		//		//  Private methods		//		//--------------------------------------------------------------------------				/**		 * Mouse move handler on the selection tool.		 * 		 * @param event		 * 		 */		private function onMouseDrag(event:MouseEvent):void		{						if (mouseResize)			{								//this.modifySelectionHighlight(resizerToolArea.x + (resizerToolArea.width / 2), resizerToolArea.y + (resizerToolArea.height / 2), resizerToolArea.width, resizerToolArea.height);							}					}			}	}