/** * This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file, * You can obtain one at http://mozilla.org/MPL/2.0/. *  * Copyright (c) 2014 Kaoru Kawashima @altoinu http://altoinu.com */package com.altoinu.flash.customcomponents.drawingboard.imageEditTools{		import com.altoinu.flash.customcomponents.drawingboard.events.DrawingBoardEvent;
	import com.altoinu.flash.customcomponents.drawingboard.imageEditTools.proto.Image_UpdateTool;
	
	import flash.display.DisplayObject;
	import flash.geom.Point;
	import flash.utils.getDefinitionByName;
	import flash.utils.getQualifiedClassName;	import com.altoinu.flash.customcomponents.drawingboard.IDrawable;
	import com.altoinu.flash.customcomponents.drawingboard.IDrawingBoard;
		//--------------------------------------	//  Events	//--------------------------------------		/**	 *  Dispatched when EraserTool erases.	 *	 *  @eventType com.altoinu.flash.customcomponents.drawingboard.events.DrawingBoardEvent.ERASE	 */	[Event(name="erase", type="com.altoinu.flash.customcomponents.drawingboard.events.DrawingBoardEvent")]		/**	 * Base class of all erasing tool.  This class is responsible for	 * erasing drawing images from the DrawingBoard.	 * 	 * <p>Calling method <code>eraseImage</code> will erase any image touching the region specified.</p>	 * 	 * <p>When you create a new instance of an <code>EraserTool</code>, you can optionally specify <code>DisplayObject</code>	 * representing shape of an eraser.  With this, any image drawn with <code>DrawingTool.bitmapMode = true</code> gets pixels that	 * overlap this shape set to transparent (alpha=0) instead of entire Bitmap being removed right away	 * (entire Bitmap is removed if all pixels have become transparent).  This way, complex shaped eraser can be used.</p>	 *	 * @author Kaoru Kawashima	 */	public class EraserTool extends Image_UpdateTool	{				//--------------------------------------------------------------------------		//		//  Constructor		//		//--------------------------------------------------------------------------				/**		 * Constructor.		 * 		 * @param eraserShape <code>DisplayObject</code> representing shape of an eraser.		 * If this is not specified, then the shape will be a rectangle defined by width and height.		 * 		 */		public function EraserTool(eraserShape:Class = null)		{						super(eraserShape);						if (eraserShape != null)			{								// Make sure the class is a DisplayObject.  If this line does not work, then Flash will error				try				{					var testObject:DisplayObject = new eraserShape();				}				catch (e:Error)				{					throw new Error("For an eraser, you must specify a class that is a DisplayObject or uses it as the base class for EraserTool.");				}							}					}				//--------------------------------------------------------------------------		//		//  Overridden properties		//		//--------------------------------------------------------------------------				//----------------------------------		//  width		//----------------------------------				private var _width:Number = 10;				/**		 * Width of the erasing area.  This property is overridden		 * to change the actual size of the image being drawn instead of the		 * EraserTool size.		 * 		 * @default 10		 */		override public function get width():Number		{						return _width;					}				/**		 * @private		 */		override public function set width(value:Number):void		{						// Convert new width into correct number using set scale			_width = value * _scaleX;					}				//----------------------------------		//  height		//----------------------------------				private var _height:Number = 10;				/**		 * Height of the erasing area.  This property is overridden		 * to change the actual size of the image being drawn instead of the		 * EraserTool size.		 * 		 * @default 10		 */		override public function get height():Number		{						return _height;					}				/**		 * @private		 */		override public function set height(value:Number):void		{						// Convert new width into correct number using set scale			_height = value * _scaleY;					}				//----------------------------------		//  scaleX		//----------------------------------				private var _scaleX:Number = 1;				/**		 * Horizontal scale of the drawing image when it is placed on the DrawingBoard.		 * 1 is the 100% size. This property is overridden		 * to change the actual size of the image being drawn instead of the		 * DrawingTool size.		 * 		 * @default 1		 */		override public function get scaleX():Number		{						return _scaleX;					}				/**		 * @private		 */				override public function set scaleX(value:Number):void		{						if (_width >= 0)			{								// Scale current width if it is set				_width = _width / _scaleX * value;							}						_scaleX = value;					}				//----------------------------------		//  scaleX		//----------------------------------				private var _scaleY:Number = 1;				/**		 * Vertical scale of the drawing image when it is placed on the DrawingBoard.		 * 1 is the 100% size.  This property is overridden		 * to change the actual size of the image being drawn instead of the		 * DrawingTool size.		 * 		 * @default 1		 */				override public function get scaleY():Number		{						return _scaleY;					}				/**		 * @private		 */				override public function set scaleY(value:Number):void		{						if (_height >= 0)			{								// Scale current height if it is set				_height = _height / _scaleY * value;							}						_scaleY = value;					}				//--------------------------------------------------------------------------		//		//  Properties		//		//--------------------------------------------------------------------------				/**		 * Units in X direction to offset the actual point to erase at when method		 * <code>eraseImage</code> is executed.		 */		public var eraseOffsetX:Number = 0;				/**		 * Units in Y direction to offset the actual point to erase at when method		 * <code>eraseImage</code> is executed.		 */		public var eraseOffsetY:Number = 0;				//----------------------------------		//  eraserShape		//----------------------------------				/**		 * Shape of an eraser.  If this is not specified, then the shape will be a rectangle.		 * This is only effective on drawing images that were drawn using		 * DrawingTool.bitmapMode = true.		 */		public function get eraserShape():Class		{						return updateShape					}				//--------------------------------------------------------------------------		//		//  Public methods		//		//--------------------------------------------------------------------------				/**		 * Erases images that is on the specified spot on IDrawable.  Any image that is within the rectangular		 * area defined by <code>width</code> by <code>height</code> at coordinate <code>xLoc</code> and		 * <code>yLoc</code> is removed from the view.		 * 		 * @param target IDrawable to erase within.		 * @param xLoc x coordinate to erase drawing item at.		 * @param yLoc y coordinate to erase drawing item at.		 * 		 * @return Object containing two Arrays, Object.bitmaps which contains Bitmaps affected by this operation		 * and Object.sprtes which contains non-Bitmaps removed from DrawingLayer.		 */		public function eraseImage(target:IDrawable, xLoc:Number = 0, yLoc:Number = 0):Object		{						var erasedItems:Object;						// Erase on board or specific layer			var eraseX:Number = xLoc + eraseOffsetX;			var eraseY:Number = yLoc + eraseOffsetY;			erasedItems = target.eraseItemsAt(eraseX, eraseY, width, height, eraserShape);						if ((erasedItems != null) &&				erasedItems.hasOwnProperty("bitmaps") && (erasedItems.bitmaps != null) && (erasedItems.bitmaps is Array) &&				erasedItems.hasOwnProperty("nonBitmaps") && (erasedItems.nonBitmaps != null) && (erasedItems.nonBitmaps is Array) &&				((erasedItems.bitmaps.length > 0) || (erasedItems.nonBitmaps.length > 0)))			{								var erasingTarget:IDrawable;				if (target is IDrawingBoard)					erasingTarget = IDrawingBoard(target).selectedLayer; // Use currently selected layer since that is where images were erased				else					erasingTarget = target;								dispatchEvent(new DrawingBoardEvent(DrawingBoardEvent.ERASE, false, false, null, erasedItems, erasingTarget, new Point(eraseX, eraseY)));							}						return erasedItems;					}				/**		 * Creates duplicate EraserTool.		 * 		 * @return 		 * 		 */		public function clone():EraserTool		{						var eraserToolClass:Class = getDefinitionByName(getQualifiedClassName(this)) as Class;			var copy:EraserTool = new eraserToolClass(eraserShape);			copy.width = width;			copy.height = height;			copy.eraseOffsetX = eraseOffsetX;			copy.eraseOffsetY = eraseOffsetY;						return copy;					}				//--------------------------------------------------------------------------		//		//  Overridden methods		//		//--------------------------------------------------------------------------				override public function toString():String		{						return "EraserTool: " + width + "x" + height + " Scale: " + scaleX + " " + scaleY;					}	}	}