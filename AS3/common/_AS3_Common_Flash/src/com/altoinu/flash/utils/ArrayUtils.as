/** * This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file, * You can obtain one at http://mozilla.org/MPL/2.0/. *  * Copyright (c) 2014 Kaoru Kawashima @altoinu http://altoinu.com */package com.altoinu.flash.utils{		import flash.geom.Rectangle;	import flash.text.TextField;		/**	 * Utility functions you can use on Arrays.	 */	public class ArrayUtils	{				//--------------------------------------------------------------------------		//		//  Class methods		//		//--------------------------------------------------------------------------				/**		 * True array shuffling 		 * 		 * This is extremely handy for making random sets of unique items.		 * Other methods like exploiting .sort will not properly shuffle an array.		 * 		 * @params Array		 * @param copy A flag used to determine if a copy of the array is returned or if the original array is changed. False will modify the original array, True will return a new array.		 */		public static function shuffle(array:Array, copy:Boolean = true):*		{						var returnArray:Array = [];			var orgArray:Array = array.slice();			while (orgArray.length > 0) {				var r:uint = Math.floor(Math.random()*orgArray.length);				returnArray.push(orgArray.splice(r, 1)[0]);			}						if(copy)			{				return returnArray;			} else			{				for(var i:int = 0; i < array.length; i++)				{					array[i] = returnArray[i];				}				return;			}			/*var array:Array = inputArray;			for (var i:int = array.length; i;) {				var j:int = Math.floor(Math.random() * i--);				var x:int = array[i]; array[i] = array[j]; array[j] = x;			}			return array;			*/					}				/**		 * Returns random position in an Array.		 * 		 * @params Array		 */		public static function getRandomItem(array:Array):*		{						return array[Math.round( Math.random() * (array.length-1) )];					}				/**		 * Generates Array containing random integers.		 * @param numItems		 * @param min		 * @param max		 * @return 		 * 		 */		public static function getArrayOfRandomInt(numItems:int = 1, min:int = 0, max:int = 10):Array		{						var newArray:Array = [];						for (var i:int = 0; i < numItems; i++)			{								newArray.push(MathUtils.randRange(min, max));							}						return newArray;					}				/**		 * Searches sourceArray for an item in an array by using strict equality (===) and		 * returns array of index positions of the item.  This is different from normal <code>indexOf</code>		 * and <code>lastIndexOf</code> methods since it will find all indices.		 * @param sourceArray Array to search into.		 * @param searchElement The item to find in the array.		 * @return 		 * 		 */		public static function indicesOf(sourceArray:Array, searchElement:*):Array		{						var indices:Array = [];						var numItems:int = sourceArray.length;			var i:int = 0;						while (i < numItems)			{								var itemIndex:int = sourceArray.indexOf(searchElement, i);								if (itemIndex == -1)				{										// No more found					break;									}				else				{										// Found searchElement at itemIndex					indices.push(itemIndex);					i = itemIndex + 1;									}							}						return indices;					}				/**		 * Checks in the array to see if there are any duplicate elements.		 * @param sourceArray		 * @return 		 * 		 */		public static function hasDuplicateItems(sourceArray:Array):Boolean		{						var numItems:int = sourceArray.length;			for (var i:int = 0; i < numItems; i++)			{								if (indicesOf(sourceArray, sourceArray[i]).length > 1)					return true; // There is an element that is at multiple indices, duplicate							}						// No duplicates found			return false;					}				/**		 * Checks in the array to see if all elements are the same in terms of strict equality (===).		 * @param sourceArray		 * @return True if all items are		 * 		 */		public static function containsSameItems(sourceArray:Array):Boolean		{						var firstItem:* = sourceArray[0];			var numItems:int = sourceArray.length;			for (var i:int = 1; i < numItems; i++)			{								if (firstItem !== sourceArray[i])					return false; // Found one element that is not the same							}						// All items are the same as the first			return true;					}				/**		* Swaps the indexes passed with each other in the array.		* 		* @param param_Array This is the array that will have the index items swapped.		* @param param_Index1 This is the first index that will be used in the swap.		* @param param_Index2 This is the second index that will be used in the swap.		* @param param_Copy A flag used to determine if a copy of the array is returned or if the original array is changed. False will modify the original array, true will return a new array with the items swapped.		*/		public static function swapItems(param_Array:Array, param_Index1:int, param_Index2:int, param_Copy:Boolean = false):* {						// Performing 3 separate checks so that a custom trace can be delivered						// Checking to see if the first index passed exists in the array			if(param_Index1 > (param_Array.length - 1)) {				trace("First supplied index does not exist in supplied array. No swapping occured");							// Checking to see if the second index passed exists in the array			} else if(param_Index2 > (param_Array.length - 1)) {				trace("Second supplied index does not exist in supplied array. No swapping occured");							// Checking to see if both indexes passed exist in the array			} else if(param_Index1 > (param_Array.length - 1) && param_Index2 > (param_Array.length - 1)) {				trace("Both supplied indexes do not exist in supplied array. No swapping occured");			} else {				var item1:*;				var item2:*;				if(!param_Copy) {					item1 = param_Array[param_Index1];					item2 = param_Array[param_Index2];										param_Array[param_Index1] = item2;					param_Array[param_Index2] = item1;										return;				} else {					var swapArray:Array = new Array();					for(var i:int = 0; i < param_Array.length; i++) {						swapArray.push(param_Array[i]);					}					item1 = swapArray[param_Index1];					item2 = swapArray[param_Index2];										swapArray[param_Index1] = item2;					swapArray[param_Index2] = item1;										return swapArray;				}			}					}				//--------------------------------------------------------------------------		//		//  Constructor		//		//--------------------------------------------------------------------------				/** 		 * Constructor.  You do not create an instance of this class... just call its static functions		 */		public function ArrayUtils()		{						throw("You do not create an instance of ArrayUtils.  Just call its static functions");					}			}	}	