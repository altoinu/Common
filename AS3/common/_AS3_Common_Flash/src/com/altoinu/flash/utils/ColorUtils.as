/** * This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file, * You can obtain one at http://mozilla.org/MPL/2.0/. *  * Copyright (c) 2014 Kaoru Kawashima @altoinu http://altoinu.com */package com.altoinu.flash.utils{		import flash.geom.ColorTransform;		/**	 * 	 * Utility functions to manipulate colors.	 * 	 */	public class ColorUtils	{				//--------------------------------------------------------------------------		//		//  Class methods		//		//--------------------------------------------------------------------------				/**		 * Given ARGB hex number color code (ex. 0xFFFFFFFF for white), returns Array containing values for alpha, red, green and blue.		 * This would be useful if you want to check on specific color channel or alpha level.		 * <pre>		 * if (alphaValue &lt; 0x88) // If alpha value is less than 128 (50%)		 * </pre>		 * 		 * @param color		 * @return Four element Array containing uint values for each color in form: [alpha, red, green, blue]		 * 		 */		public static function separateARGBValue(color:uint):Array		{						var alphaValue:uint = color >>> 24;			var redValue:uint = color >>> 16 & 0xFF;			var greenValue:uint = color >>> 8 & 0xFF;			var blueValue:uint = color & 0xFF;						return [alphaValue, redValue, greenValue, blueValue];					}				/**		 * Given four hex number between 0x00 and 0xFF (0 and 255), returns full combined ARGB value.		 * @param alphaValue		 * @param redValue		 * @param greenValue		 * @param blueValue		 * @return 		 * 		 */		public static function buildARGBColorValue(alphaValue:uint = 0x00, redValue:uint = 0x00, greenValue:uint = 0x00, blueValue:uint = 0x00):uint		{						if (alphaValue > 0xFF)				alphaValue = 0xFF;			if (redValue > 0xFF)				redValue = 0xFF;			if (greenValue > 0xFF)				greenValue = 0xFF;			if (blueValue > 0xFF)				blueValue = 0xFF;						return alphaValue << 24 | redValue << 16 | greenValue << 8 | blueValue;					}				/**		 * Given start color, ending color, and progress between 0 and 1, returns color in between		 * those two colors for smooth transition between them. For example, if start color is red 0xFF0000		 * and end color is 0x0000FF, progress 0.5 would return color code half way between those two.		 * 		 * @param startColor RGB or ARGB value		 * @param endColor RGB or ARGB value		 * @param progress between 0 and 1 where 0 would return <code>startColor</code> and 1 would return <code>endColor</code>.		 * @return 		 * 		 */		public static function interpolateColor(startColor:uint, endColor:uint, progress:Number):uint		{						var startColorARGBValues:Array = separateARGBValue(startColor);			var endColorARGBValues:Array = separateARGBValue(endColor);						var resultAlpha:uint = startColorARGBValues[0] + (endColorARGBValues[0] - startColorARGBValues[0]) * progress;			var resultRed:uint = startColorARGBValues[1] + (endColorARGBValues[1] - startColorARGBValues[1]) * progress;			var resultGreen:uint = startColorARGBValues[2] + (endColorARGBValues[2] - startColorARGBValues[2]) * progress;			var resultBlue:uint = startColorARGBValues[3] + (endColorARGBValues[3] - startColorARGBValues[3]) * progress;						return buildARGBColorValue(resultAlpha, resultRed, resultGreen, resultBlue);					}				/**		 * Takes <code>hexColor</code> and converts it to a ColorTransform object.		 *		 * Example:		 * This will apply a red color transform to the myMovieClip object.		 * <code>myMovieClip.transform.colorTransform = ColorUtils.hexColorToColorTransform("FF0000");</code>		 * 		 * @param hexColor		 * @return 		 * 		 */		public static function hexColorToColorTransform(hexColor:String):ColorTransform		{			if(hexColor.length!=6){				// Source does not have = sign.  Invalid				throw(new Error("Specified hexColor is not in valid form... It should be six characters long."));				return null;			}						try{				var tmp:int = parseInt("0x" + hexColor);			}catch(error:Error){				// Source does not have = sign.  Invalid				throw(new Error("Specified hexColor is not a valid hexidecimal value.  Only values 000000 - FFFFFF are accepted."));				return null;			}									var rOffset:Number = parseInt("0x" + hexColor.substring(0,2));			var gOffset:Number = parseInt("0x" + hexColor.substring(2,4));			var bOffset:Number = parseInt("0x" + hexColor.substring(4,6));						return new ColorTransform(0, 0, 0, 1, rOffset, gOffset, bOffset, 0);		}				//--------------------------------------------------------------------------		//		//  Constructor		//		//--------------------------------------------------------------------------				/**		 * Constructor.  You do not create an instance of this class... just call its static functions.		 * 		 */		public function ColorUtils()		{						throw("You do not create an instance of DataParsers.  Just call its static functions");					}			}	}