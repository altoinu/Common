/** * This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file, * You can obtain one at http://mozilla.org/MPL/2.0/. *  * Copyright (c) 2014 Kaoru Kawashima @altoinu http://altoinu.com */package com.altoinu.flash.datamodels{		/**	 * Class to provide easy way of getting Dates in Array format so they can be used in places	 * such as combo boxes.	 * 	 */		public class Dates	{				/**		 * Returns years data Array.		 * 		 * @param start		 * @param end Optional, if not defined, then it will be current year in system clock		 * @param ascending		 * @return 		 * 		 */		public static function getYearsData(start:Number = 1907, end:Number = NaN, ascending:Boolean = true):Array		{						if (isNaN(end))				end = new Date().fullYear;						var years:Array = [];						for (var i:Number = ascending ? start : end;				(start <= i) && (i <= end);				ascending ? i++ : i--)			{								years.push({data: i, label: String(i)});							}						return years;					}				/**		 * Returns Months in a year. Data field is zero based (0 - January, 1 - February...)		 * @return Array of month data, {data: 0, label: &quot;January&quot;}, ...		 * 		 */				public static function getMonthData(shortLabel:Boolean = false):Array		{						var months:Array = [];			for (var i:int = 0; i < 12; i++)			{								months.push({data: i, label: getMonthLabel(i, shortLabel)});							}						return months;					}				/**		 * Returns Months in a year in French. 		 * @return 		 * 		 */				public static function getMonthDataFrench(shortLabel:Boolean = false):Array		{						var months:Array = [];			for (var i:int = 0; i < 12; i++)			{								months.push({data: i, label: getMonthLabelFrench(i, shortLabel)});							}						return months;					}				/**		 * Returns months in year in Numbers.		 * @param shortLabel		 * @return 		 * 		 */		public static function getMonthDataNumbers(shortLabel:Boolean = false):Array		{						var months:Array = [];			for (var i:int = 0; i < 12; i++)			{								months.push({data: i, label: String(i + 1)});							}						return months;					}				/**		 * Given year and month (0 - Jan, 1 - Feb, etc.) return number of days.		 * @param year		 * @param month		 * @return 		 * 		 */		public static function getNumDaysInMonth(year:int, month:int):int		{						switch (month)			{								case 1:					// figure out leap year for February					if (year % 400 == 0)						return 29;					else if (year % 100 == 0)						return 28;					else if (year % 4 == 0)						return 29;					else						return 28;					break;												case 0: // Jan				case 2: // Mar				case 4: // May				case 6: // Jul				case 7: // Aug				case 9: // Oct				case 11: // Dec have 31 days					return 31;					break;								default: // Rest of months have 30 days					return 30;					break;							}					}				/**		 * Returns days 1 - 31. 		 * @param maxDate		 * @return 		 * 		 */				public static function getDays(maxDate:int = 31):Array		{						var days:Array = [];						for (var i:int = 1; i <= maxDate; i++)			{								days.push({data:String(i), label:String(i)});							}						return days;					}				/**		 * Given week "<code>day</code>" (0 - Sunday, 1 - Monday...), returns label (Sunday, Monday, Tuesday...)		 * or short label if <code>short</code> is set to true (Sun, Mon, Tues...) 		 * 		 * @param day		 * @param short		 */		public static function getWeekDayLabel(day:Number, short:Boolean = false):String		{						switch (day)			{								case 0:					return short ? "Sun" : "Sunday";					break;				case 1:					return short ? "Mon" : "Monday";					break;				case 2:					return short ? "Tues" : "Tuesday";					break;				case 3:					return short ? "Wed" : "Wednesday";					break;				case 4:					return short ? "Thurs" : "Thursday";					break;				case 5:					return short ? "Fri" : "Friday";					break;				case 6:					return short ? "Sat" : "Saturday";					break;							}						return null;					}				/**		 * Given <code>month</code> (0 - January, 1 - February...), returns label (January, February...)		 * or short label if <code>short</code> is set to true (Jan, Feb, Mar...)		 * @param month		 * @param short		 * @return 		 * 		 */		public static function getMonthLabel(month:Number, short:Boolean = false):String		{						switch (month)			{								case 0:					return short ? "Jan" : "January";					break;				case 1:					return short ? "Feb" : "February";					break;				case 2:					return short ? "Mar" : "March";					break;				case 3:					return short ? "Apr" : "April";					break;				case 4:					return short ? "May" : "May";					break;				case 5:					return short ? "Jun" : "June";					break;				case 6:					return short ? "Jul" : "July";					break;				case 7:					return short ? "Aug" : "August";					break;				case 8:					return short ? "Sep" : "September";					break;				case 9:					return short ? "Oct" : "October";					break;				case 10:					return short ? "Nov" : "November";					break;				case 11:					return short ? "Dec" : "December";					break;							}						return null;					}				/**		 * Given <code>month</code> (0 - January, 1 - February...), returns French label (Janvier, Février...)		 * or short label if <code>short</code> is set to true (Janv, Févr, Mars...)		 * @param month		 * @param short		 * @return 		 * 		 */		public static function getMonthLabelFrench(month:Number, short:Boolean = false):String		{						switch (month)			{								case 0:					return short ? "Janv" : "Janvier";					break;				case 1:					return short ? "Févr" : "Février";					break;				case 2:					return short ? "Mars" : "Mars";					break;				case 3:					return short ? "Avril" : "Avril";					break;				case 4:					return short ? "Mai" : "Mai";					break;				case 5:					return short ? "Juin" : "Juin";					break;				case 6:					return short ? "Juil" : "Juillet";					break;				case 7:					return short ? "Août" : "Août";					break;				case 8:					return short ? "Sept" : "Septembre";					break;				case 9:					return short ? "Oct" : "Octobre";					break;				case 10:					return short ? "Nov" : "Novembre";					break;				case 11:					return short ? "Déc" : "Décembre";					break;							}						return null;					}				/**		 * Given birthdate, return age in Number.		 * @param birthdate		 * @return 		 * 		 */		public static function getAge(birthdate:Date):Number		{						var today:Date = new Date(); 			var ageInMilliSeconds:Number = today.time - birthdate.time; 			return ageInMilliSeconds / 1000 / 60 / 60 / 24 / 365;					}				[Deprecated(replacement="Dates.getYearsData")]		/**		 * Returns years from 1907 to specified currentYear.		 *  		 * @param currentYear		 * @return 		 * 		 */				public static function getYears(currentYear:int):Array		{						var years:Array = [];						for (var i:Number = currentYear; i >= 1907; i--)			{								years.push({data:String(i), label:String(i)});							}						return years;					}				[Deprecated(replacement="Dates.getYearsData")]		/**		 * Returns years from 1907 to specified currentYear.		 *  		 * @param currentYear		 * @return 		 * 		 */				public static function getPetYears(currentYear:int):Array		{						var years:Array = [];						for (var i:Number = currentYear; i >= 1988; i--)			{								years.push({data:String(i), label:String(i)});							}						return years;					}				[Deprecated(message="This method was returning Jan as 01, Feb as 02, etc. which is not AS3 Date month likes. AS3 Date class wants it Jan - 0, Feb - 1, etc.", replacement="Dates.getMonthData")]		/**		 * Returns Months in a year. 		 * @return 		 * 		 */				public static function getMonths():Array		{						var months:Array = [				{data: "01", label: "Jan."},				{data: "02", label: "Feb."},				{data: "03", label: "March"},				{data: "04", label: "April"},				{data: "05", label: "May"},				{data: "06", label: "June"},				{data: "07", label: "July"},				{data: "08", label: "Aug."},				{data: "09", label: "Sept."},				{data: "10", label: "Oct."},				{data: "11", label: "Nov."},				{data: "12", label: "Dec."}			];						return months;					}				[Deprecated(message="This method was returning Jan as 01, Feb as 02, etc. which is not AS3 Date month likes. AS3 Date class wants it Jan - 0, Feb - 1, etc.", replacement="Dates.getMonthData")]		/**		 * Returns Months in a year in a more shortened form. 		 * @return 		 * 		 */				public static function getMonthsShorten():Array		{						var months:Array = [				{data: "01", label: "Jan"},				{data: "02", label: "Feb"},				{data: "03", label: "Mar"},				{data: "04", label: "Apr"},				{data: "05", label: "May"},				{data: "06", label: "Jun"},				{data: "07", label: "Jul"},				{data: "08", label: "Aug"},				{data: "09", label: "Sep"},				{data: "10", label: "Oct"},				{data: "11", label: "Nov"},				{data: "12", label: "Dec"}			];						return months;					}				[Deprecated(replacement="Dates.getMonthData")]		/**		 * Returns Months in a year in a number form. 		 * @return 		 * 		 */				public static function getMonthsNumber():Array		{						var months:Array = [				{data: "01", label: "1"},				{data: "02", label: "2"},				{data: "03", label: "3"},				{data: "04", label: "4"},				{data: "05", label: "5"},				{data: "06", label: "6"},				{data: "07", label: "7"},				{data: "08", label: "8"},				{data: "09", label: "9"},				{data: "10", label: "10"},				{data: "11", label: "11"},				{data: "12", label: "12"}			];						return months;					}				[Deprecated(replacement="Dates.getMonthData")]		/**		 * Returns Months in a year without being shortend. 		 * @return 		 * 		 */				public static function getMonthsNotShortend():Array		{						var months:Array = [				{data: "01", label: "January"},				{data: "02", label: "February"},				{data: "03", label: "March"},				{data: "04", label: "April"},				{data: "05", label: "May"},				{data: "06", label: "June"},				{data: "07", label: "July"},				{data: "08", label: "August"},				{data: "09", label: "September"},				{data: "10", label: "October"},				{data: "11", label: "November"},				{data: "12", label: "December"}			];						return months;					}				[Deprecated(message="This method was returning Jan as 01, Feb as 02, etc. which is not AS3 Date month likes. AS3 Date class wants it Jan - 0, Feb - 1, etc.", replacement="Dates.getMonthDataFrench")]		/**		 * Returns French translated months in a year in a more shortened form. 		 * @return 		 * 		 */				public static function getFrenchMonthsShorten():Array		{						var months:Array = [{data: "01", label: "Jan"},				{data: "02", label: "Fév"},				{data: "03", label: "Mar"},				{data: "04", label: "Avr"},				{data: "05", label: "Mai"},				{data: "06", label: "Jn"},				{data: "07", label: "Jll"},				{data: "08", label: "Aoû"},				{data: "09", label: "Sep"},				{data: "10", label: "Oct"},				{data: "11", label: "Nov"},				{data: "12", label: "Déc"}];						return months;					}				[Deprecated(message="This method was returning Jan as 01, Feb as 02, etc. which is not AS3 Date month likes. AS3 Date class wants it Jan - 0, Feb - 1, etc.", replacement="Dates.getMonthDataFrench")]		/**		 * Returns French translated months in a year in a more shortened form. 		 * @return 		 * 		 */				public static function getFrenchMonths():Array		{						var months:Array = [{data: "01", label: "Janvier"},				{data: "02", label: "Février"},				{data: "03", label: "Mars"},				{data: "04", label: "Avril"},				{data: "05", label: "Mai"},				{data: "06", label: "Juin"},				{data: "07", label: "Juillet"},				{data: "08", label: "Août"},				{data: "09", label: "Septembre"},				{data: "10", label: "Octobre"},				{data: "11", label: "Novembre"},				{data: "12", label: "Décembre"}];						return months;					}				[Deprecated(replacement="Dates.getMonthDataNumbers")]		/**		 * Returns months 1 - 12. 		 * @return 		 * 		 */				public static function getMonthNumbers():Array		{						var days:Array = [];						for (var i:Number = 1; i <= 12; i++)			{								days.push({data:String(i), label:String(i)});							}						return days;					}				[Deprecated(replacement="Dates.getMonthLabel")]		/**		 * Returns Month as a String. 		 *  		 * @param monthNum		 * @return 		 */				public static function getMonthByName(monthNum:Number, fullName:Boolean = true):String		{						var monthsEng:Array = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];			var monthsEngAbbr:Array = ["Jan", "Feb", "March", "April", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];						if (fullName)				return monthsEng[monthNum];			else				return monthsEngAbbr[monthNum];					}				[Deprecated(replacement="Dates.getMonthLabelFrench")]		/**		 * Returns French Month as a String. 		 *  		 * @param monthNum		 * @return 		 */				public static function getFrenchMonthByName(monthNum:Number, fullName:Boolean = true):String		{						var monthsFr:Array = ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"];			var monthsFrAbbr:Array = ["Janv", "Févr", "Mars", "Avril", "Mai", "Juin", "Juil", "Août", "Sept", "Oct", "Nov", "Déc"];						if (fullName)				return monthsFr[monthNum];			else				return monthsFrAbbr[monthNum];					}			}	}