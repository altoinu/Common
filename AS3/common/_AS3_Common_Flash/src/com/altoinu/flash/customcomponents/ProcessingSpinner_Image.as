/** * This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this file, * You can obtain one at http://mozilla.org/MPL/2.0/. *  * Copyright (c) 2014 Kaoru Kawashima @altoinu http://altoinu.com */package com.altoinu.flash.customcomponents{		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.TimerEvent;	import flash.utils.Timer;		/**	 * Spinner wheel animation. You can use this to indicate some processing is being done in the background, such as loading image.	 * You must specify a DisplayObject class to be used as wings to spin around.	 * 	 * @author Kaoru Kawashima	 */	public class ProcessingSpinner_Image extends Sprite	{				//--------------------------------------------------------------------------		//		//  Constructor		//		//--------------------------------------------------------------------------				/**		* Constructor.		*		* @param spinnerWing DisplayObject class to be used as a wing around spinner that will do the spinning animation.		* @param numWings Number of wings around the spin wheel.  Minimum 2.		* @param radius Radius of the spinner wheel.		*/		public function ProcessingSpinner_Image(spinnerWing:Class, numWings:uint = 12, radius:Number = 10)		{						addChild(_spinnerContainer);						if (numWings < 2)				numWings = 2;			_numWings = numWings;						_radius = radius;						this.spinnerWing = spinnerWing;					}				//--------------------------------------------------------------------------		//		//  Variables		//		//--------------------------------------------------------------------------				private var _spinnerContainer:MovieClip = new MovieClip();				private var _spinWing:Array = [];				private var _spinTimer:Timer;				private var _spinShiftAngle:Number;				//--------------------------------------------------------------------------		//		//  Properties		//		//--------------------------------------------------------------------------				//----------------------------------		//  spinnerWing		//----------------------------------				private var _spinnerWing:Class;				public function get spinnerWing():Class		{						return _spinnerWing;					}				/**		 * @private		 */		public function set spinnerWing(wing:Class):void		{						_spinnerWing = wing;						setupWings();					}				//----------------------------------		//  numWings		//----------------------------------				private var _numWings:uint = 12;				/**		 * Number of wings. Minimum 2.		 * 		 * @default 12		 */		public function get numWings():uint		{						return _numWings;					}				/**		 * @private		 */		public function set numWings(value:uint):void		{						if (value < 2)				value = 2;						_numWings = value;						setupWings();					}				//----------------------------------		//  radius		//----------------------------------				private var _radius:Number = 10;				/**		 * Radius of the wing.		 * 		 * @default 10		 */		public function get radius():Number		{						return _radius;					}				/**		 * @private		 */		public function set radius(value:Number):void		{						_radius = value;						setupWings();					}				//----------------------------------		//  spinning		//----------------------------------				/**		 * true when spinner is spinning.		 */		public function get spinning():Boolean		{						if (_spinTimer != null)				return _spinTimer.running;			else				return false;					}				//--------------------------------------------------------------------------		//		//  Private methods		//		//--------------------------------------------------------------------------				private function setupWings():void		{						clearWings();						// Create wings and place them in circle			for (var i:int = 0; i < numWings; i++)			{								// Place new wing on the screen								var newWing:DisplayObject = new spinnerWing();				_spinnerContainer.addChild(newWing);				_spinWing.push(newWing);								newWing.alpha = -1.15 * i / numWings + 1;								// Position the new wing				var spinWingAngle:Number = (-360 / numWings) * i;				newWing.rotation = spinWingAngle;				var spinWingAngle_Radian:Number = spinWingAngle * Math.PI / 180;				newWing.x = radius * Math.cos(spinWingAngle_Radian);				newWing.y = radius * Math.sin(spinWingAngle_Radian);							}					}				private function clearWings():void		{						var numCurrentWings:int = _spinWing.length;			for (var i:int = 0; i < numCurrentWings; i++)			{								_spinWing[i].parent.removeChild(_spinWing[i]);							}						_spinWing = [];					}				//--------------------------------------------------------------------------		//		//  Methods		//		//--------------------------------------------------------------------------				/**		* Start the spin.		*		* @param shiftAngle Angle to rotate each step.		* @param revTime Time in milliseconds spin wheel takes to go around one revolution.		*/		public function startSpin(shiftAngle:Number = 30, revTime:Number = 1000):void		{						stopSpin();						_spinShiftAngle = shiftAngle;			var numCyclesPerRev:Number = 360 / Math.abs(shiftAngle);			var spinTimeInterval:Number = revTime / numCyclesPerRev;			_spinTimer = new Timer(spinTimeInterval);			_spinTimer.addEventListener(TimerEvent.TIMER, spinWheel);			_spinTimer.start();					}				/**		 * Stops the spin. 		 * 		 */				public function stopSpin():void		{						if (spinning)			{								_spinTimer.stop();				_spinTimer.removeEventListener(TimerEvent.TIMER, spinWheel);							}					}				//--------------------------------------------------------------------------		//		//  Event handlers		//		//--------------------------------------------------------------------------				/**		 * Timer event handler to do the actual spinning.		 *  		 * @param event		 * 		 */				private function spinWheel(event:TimerEvent):void		{						_spinnerContainer.rotation += _spinShiftAngle;						if (_spinnerContainer.rotation > 360)				_spinnerContainer.rotation -= 360;					}			}	}